---
# Provision instances in AWS specific to the LAMP HA Proxy demo
- name: Provision instances in AWS
  hosts: localhost
  connection: local
  gather_facts: False

  # load AWS variables from this group vars file
  vars_files:
  - group_vars/aws_vars_jdd
  - group_vars/all

  tasks:
  # Launch End Hosts for each NDN Testbed gateway node

  - name: Launch end host for WU
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_wu }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_wu }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_wu }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_wu }}' ,'ansible_group':'wu_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-producer', 'Name':'wu_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for BASEL
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_basel }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_basel }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_basel }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_basel }}' ,'ansible_group':'basel_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'basel_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for BERN
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_bern }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_bern }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_bern }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_bern }}' ,'ansible_group':'bern_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'bern_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for GOETTINGEN
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_goettingen }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_goettingen }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_goettingen }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_goettingen }}' ,'ansible_group':'goettingen_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'goettingen_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for URJC
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_urjc }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_urjc }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_urjc }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_urjc }}' ,'ansible_group':'urjc_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'urjc_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for AFA
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_afa }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_afa }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_afa }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_afa }}' ,'ansible_group':'afa_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'afa_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for PADUA
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_padua }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_padua }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_padua }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_padua }}' ,'ansible_group':'padua_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'padua_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for COPELABS
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_copelabs }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_copelabs }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_copelabs }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_copelabs }}' ,'ansible_group':'copelabs_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'copelabs_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for MINHO
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_minho }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_minho }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_minho }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_minho }}' ,'ansible_group':'minho_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'minho_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for SYSTEMX
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_systemx }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_systemx }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_systemx }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_systemx }}' ,'ansible_group':'systemx_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'systemx_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for LIP6
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_lip6 }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_lip6 }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_lip6 }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_lip6 }}' ,'ansible_group':'lip6_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'lip6_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for TNO
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_tno }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_tno }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_tno }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_tno }}' ,'ansible_group':'tno_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'tno_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Launch end host for NTNU
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image_ntnu }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: true
      region: "{{ ec2_region_ntnu }}"
      instance_tags: "{'host_gw':'{{ ec2_host_gw_ntnu }}' ,'host_gw_prefix':'{{ ec2_host_gw_prefix_ntnu }}' ,'ansible_group':'ntnu_host', 'type':'{{ ec2_instance_type }}', 'group':'ndnrtc-consumer', 'Name':'ntnu_host_''{{ local_user_name }}'}"
      count: "{{ ec2_host_count }}"
      wait: true
    register: ec2

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      delay: 60
      timeout: 320
      state: started
    with_items: "{{ ec2.instances }}"

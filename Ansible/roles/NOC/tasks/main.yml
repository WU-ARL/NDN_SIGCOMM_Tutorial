---
# need to add NDN repository

# When RHEL we need these:
#    - wget         
#    - python-devel  (sudo yum install python-devel) This is needed by boost
################    - boost-devel   (sudo yum install boost-devel)
#    - build boost libs from source: 
#          > wget https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.gz
#          > tar -xzf boost_1_64_0.tar.gz
#          > cd boost_1_64_0
#          > ./bootstrap.h
#          > ./b2
#          > sudo ./b2 install
#          >
#    
#    - sqlite3       (sudo yum install sqlite)
#    - sqlite3-dev   (sudo yum install sqlite-devel)
#    - crypto++      (git http://github.com/weidai11/cryptopp/releases/tag/CRYPTOPP_5_6_5)
#                      make static dynamic cryptest.exe ; sudo make install
#    - openssl       (sudo yum install openssl)
#    - openssl-devel (sudo yum install openssl openssl-devel)

# tasks file for NOC
# apt: name={{ item }} state=present

- debug:
    msg: "OS: {{ ansible_distribution }} major version: {{ ansible_distribution_major_version }} full version: {{ ansible_distribution_version }}"

#- name: copy rotateLogs.sh to NOC/bin
#  copy: dest=/home/ndnops/ndn-ops/NOC/bin/rotateLogs.sh  src=roles/NOC/files/rotateLogs.sh owner=ndnops group=ndnops mode=0755

#- name: create NOC directories
#  file: path=/home/ndnops/ndn-ops/NOC/ping_delay_tests state=directory owner=ndnops group=ndnops mode=0755

#- name: copy ndnping parallel test script
#  copy: dest=/home/ndnops/ndn-ops/NOC/ping_delay_tests/./getTestbedDelays_ndnping_parallel.sh  src=roles/NOC/files/./getTestbedDelays_ndnping_parallel.sh owner=ndnops group=ndnops mode=0755
#
#- name: copy ndnping parallel test prefix list
#  copy: dest=/home/ndnops/ndn-ops/NOC/ping_delay_tests/./full_prefix_list.txt  src=roles/NOC/files/./full_prefix_list.txt owner=ndnops group=ndnops mode=0644
#
#- name: copy ndnping parallel test prefix list (UP)
#  copy: dest=/home/ndnops/ndn-ops/NOC/ping_delay_tests/./full_prefix_list_UP.txt  src=roles/NOC/files/./full_prefix_list_UP.txt owner=ndnops group=ndnops mode=0644
#
#- cron: name="parallel ndn ping test" user="ndnops" state=present disabled=yes minute="15" job="cd /home/ndnops/ndn-ops/NOC/ping_delay_tests; ./getTestbedDelays_ndnping_parallel.sh -c 300 -n {{ inventory_hostname }} "
#
#- cron: name="parallel ndn ping test" user="ndnops" state=present disabled=yes minute="15" job="cd /home/ndnops/ndn-ops/NOC/ping_delay_tests; ./getTestbedDelays_ndnping_parallel.sh -c 300 -n {{ inventory_hostname }} "
#
# Download and install EPEL for Centos/RHEL version 7
#- name: Download EPEL Repo - Centos/RHEL 7
#  get_url: url=http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm dest=/tmp/epel-release-latest-7.noarch.rpm
#  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"
#
#- name: Install EPEL Repo - Centos/RHEL 7
#  command: rpm -ivh /tmp/epel-release-latest-7.noarch.rpm creates=/etc/yum.repos.d/epel.repo
#  when: "ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'"
#
#- name: install general RedHat packages 
#  when: ansible_distribution == "RedHat" 
#  action: >
#       {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes
#  with_items:
#       - net-tools
#       - tcpdump
#       - rpm-build
#       - apr-devel
#       - wget
#       - python-devel
#       - bzip2-devel
#       - fail2ban
#       - sqlite-devel
#       - openssl
#       - openssl-devel
#       - protobuf
#       - protobuf-compiler
#       - protobuf-devel
#       - log4cxx.x86_64

- name: add ndn repository
  apt_repository: repo='ppa:named-data/ppa' state=present
  when: ansible_distribution == "Ubuntu" 
  become: yes

- name: install general ubuntu packages 
  when: ansible_distribution == "Ubuntu" 
  become: yes
  action: >
       {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes
  with_items:
       - build-essential
       - git
       - openssl 
       - python-openssl 
       - libssl-dev 
       - expat 
       - libexpat-dev 
       - libpcap-dev
       - gawk 
       - texinfo 
       - asciidoc 
       - finger
       - python-software-properties
       - software-properties-common
       - ntp
       - autoconf 
       - libtool
       - python-dev
       - g++ 
       - autotools-dev 
       - libicu-dev 
       - libbz2-dev  
       - sqlite3
       - pkg-config
       - libssl-dev 
       - libsqlite3-dev 
       - libcrypto++-dev
       - aptitude
       - python3-dev
       - python3-setuptools
       - python3-pip
       - fail2ban
       - liblog4cxx10*
       - libprotobuf-dev

#       - liblog4cxx10
#         when {{ ansible_distribution_major_version }} == 14 
#       - liblog4cxx10v5
#         when {{ ansible_distribution_major_version }} == 16 

#- name: install base ndn libraries 
#  action: >
#       {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes
#  with_items:
#       - ndn-cxx
#       - ndn-cxx-dev

#- name: remove python3 stuff
#  apt: 
#    name: python3-dev python3-setuptools 
#    state: absent 
#    purge: yes

#- command: aptitude -y install python3-dev python3-setuptools
#  become: yes
#  become_user: root

#- command: /usr/bin/easy_install3 pip
#  become: yes
#  become_user: root

#- pip: name=requests executable=/usr/local/bin/pip3

#- pip: name=requests,pyndn executable=/usr/local/bin/pip3

#- pip: name=pyndn executable=/usr/local/bin/pip3

#- name: copy ndnop-process-requests to TESTBED
#  copy: dest=/usr/local/bin/ndnop-process-requests src=roles/NOC/files/ndnop-process-requests.testbed owner=root group=root mode=0755
#  when: inventory_hostname != "UCLA"

#- name: copy ndnop-process-requests to UCLA
#  copy: dest=/usr/local/bin/ndnop-process-requests src=roles/NOC/files/ndnop-process-requests.ucla owner=root group=root mode=0755
#  when: inventory_hostname == "UCLA"


